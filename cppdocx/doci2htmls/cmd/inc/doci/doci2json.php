<?php$argc = $_SERVER["argc"];if ($argc < 2) {	echo "Usage: php doci2json.php <file>\n";	return -1;}$argv = $_SERVER["argv"];$fileText = file($argv[1]);$fileLine = count($fileText);function CountBlank($context){//计算该行的首位置的空格数	$contextLen = strlen($context);	for ($count = 0, $pos = 0; $pos < $contextLen;$pos++)	{		if ($context[$pos] == chr(32))			$count++;		else if ($context[$pos] == chr(9))			$count = $count + 4;		else			break;	}	$pos = strpos($context, '*');	if ($pos === false)		return -1;	return $count;}function HavaSubItems($line){//判断本行的下一行是否是该行的子集。	global $fileLine;	global $fileText;	if ($line < $fileLine)	{		$blankCount = CountBlank($fileText[$line]);		$nextLine_blankCount = CountBlank($fileText[$line + 1]);		if ($nextLine_blankCount > $blankCount)			return true;	}	return false;}function HaveSameLevel($line){//本行之后，有和本行同级的行未处理。	global $fileLine;	global $fileText;	$count = CountBlank($fileText[$line]);	while ($line < $fileLine)	{		$line++;		$countb = CountBlank($fileText[$line]);		if ($countb < $count)			return 0;		if ($count == $countb)			return $line;	}	return 0;}//////////////////////////////////////function PushItems //将与本行同级的所有item加入上一级的items[]["item"]//@arg line : 本行的行数//@arg items: 上一级的itemsfunction PushItems($line, &$upItems){	global $fileText;	$context = $fileText[$line];		$startPos = strpos($context, '*');	if ($startPos === false)		return;	$item = array();	$endPos = strpos($context, ':');	if (@$endPos)	{		$path = substr($context, $startPos + 1, $endPos - 1);		$path = trim($path);		$path = trim($path, ":");		$title = substr($context, $endPos + 1);		$title = trim($title);		$item["item"]["path"] = $path;		$item["item"]["title"] = $title;	}	else	{		$path = substr($context, $startPos + 1);		$path = trim($path);		$item["item"]["path"] = $path;	}//如果下一行是子级	if (HavaSubItems($line))	{		$items = array();		$items = PushItems($line + 1, $items);		if (@$items)			$item["item"]["items"] = $items;	}	array_push($upItems, $item);	$nextLine = 0;	$nextLine = HaveSameLevel($line);		if ($nextLine)	{		unset($item);		$item = PushItems($nextLine, $upItems);	}	return $upItems;}////////////////////////////////////// main function$doc = array();$metas = array();$categoryShowed = false;$encodingShowed = false;for ($line = 0; $line < $fileLine; $line++){	if (!$encodingShowed)	{		$codeSet = strstr($fileText[$line], "@encoding");		if (strlen($codeSet) > 0)		{			$encodingShowed = true;			$codeSet = substr($codeSet, strlen("@encoding"));			$codeSet = trim($codeSet);			if ($codeSet != "utf8")				for ($i = 0; $i < $fileLine; $i++)					$fileText[$i] = iconv($codeSet, "UTF-8", $fileText[$i]);		}	}	if (!$categoryShowed)	{		$cate = strstr($fileText[$line], "@category");		if (strlen($cate) > 0)		{			$cate = substr($cate, strlen("@category"));			$cate = trim($cate);			$metas["category"] = $cate;			$doc["metas"] = $metas;			$categoryShowed = true;		}	}	if ($fileText[$line][0] == '*')	{		$items = array();		$items = PushItems($line, $items);		if (@$items)			$doc["items"] = $items;		break;	}}echo json_encode($doc);return;?>