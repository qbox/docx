<?php
	/*
		Generate Client Proxy of RPC
	*/
	function genMsgMaker($name, $args_set, $indent /*,$isAsync*/)
	{
		$funcname = "_${name}_msg";
		if (count($args_set))
		{
			echo "\n${indent}static cerl::Message cerl_call $funcname(\n${indent}\tcerl::Process* _caller";
		}
		else
		{
			echo "\n${indent}static cerl::Message cerl_call $funcname(cerl::Process* _caller";
		}
		
		foreach ($args_set as $var => $type) 
		{
			$typename = mapType($type, "&");
			echo ",\n${indent}\tconst $typename $var";
		}
		
		if(count($args_set))
			echo "\n${indent}\t";
		echo ")\n";
		
		echo "${indent}{\n";
			$indent2 = $indent . "\t";		
			echo "${indent2}cerl::MessageWriter _wr(_caller);\n";
			echo "${indent2}NS_CERL_IO::put(_wr, (cerl::FID)code_${name});\n";
			
			foreach ($args_set as $var => $type)
			{
				echo "${indent2}NS_CERL_IO::put(_wr, ${var});\n";
			}
			echo "${indent2}return _wr.close();\n";
		echo "${indent}}\n";
	}
	
	function genFuncDef($func, $indent)
	{
		$name = $func->name;
		$async = @$func->async;
		$args_set = parseArgs(@$func->args);
		$retType = getRetType($name);
		
		genMsgMaker($name, $args_set, $indent);
		
		for ($i = 0; $i < 2; ++$i)
		{
			if ($async)
			{
				if ($i == 1)
					break;
				echo "\n$indent/*[async]*/";
			}
			
			echo "\n${indent}void cerl_call $name(";
			if (count($args_set) || !$async)
				echo "\n${indent}\t";
			echo "cerl::Process* _caller";
			
			if (!$async)
				 echo ",\n${indent}\t${retType}& _result";
			
			foreach ($args_set as $var => $type)
			{
				$typename = mapType($type, "&");
				echo ",\n${indent}\tconst ${typename} ${var}";
			}
			if ($i == 1)
				echo ",\n${indent}\tconst cerl::Timeout _timeout";
			
			if(count($args_set) || !$async)
				echo "\n${indent}\t";
			echo ")\n";
			
			echo "${indent}{\n";
				echo "${indent}\tcerl::Message const _msg = _${name}_msg(_caller";
				foreach ($args_set as $var => $type) 
				{
					echo ", ${var}";
				}
				echo ");\n";
				
			if($async)
				echo "${indent}\tcerl_send_cast(_caller, *this, _msg);\n";
			else if ($i == 0)
				echo "${indent}\tcerl::rpc_call(_caller, _result, *this, _msg);\n";
			else
				echo "${indent}\tcerl::rpc_call(_caller, _result, *this, _msg, _timeout);\n";
				
			echo "${indent}}\n";
		}
	}
	
	function genProxyClass($server, $indent)
	{
		global $class_postfix_base;
		$class_name = $server->name;
		$base_class_name = $class_name . $class_postfix_base;
		echo "\n${indent}class $class_name : public cerl::RemoteProcess, public ${base_class_name}\n";
		echo "${indent}{\n";
		
		$indent2 = $indent . "\t";
			
		echo "${indent}public:\n";	

		echo "${indent2}${class_name}()\n";
		echo "${indent2}{}\n\n";

		echo "${indent2}${class_name}(const cerl::RemoteProcess& _me)\n";
		echo "${indent2}\t: cerl::RemoteProcess(_me)\n";
		echo "${indent2}{}\n\n";

		echo "${indent2}void cerl_call operator=(const cerl::RemoteProcess& _me) {\n";
		echo "${indent2}\tcerl::RemoteProcess::operator=(_me);\n";
		echo "${indent2}}\n";

		$sentences = @$server->sentences;
		if ($sentences)
		{
			foreach ($sentences as $sent)
			{				
				$func = @$sent->function;
				if (!$func)
					continue;
				genFuncDef($sent->function, $indent2);
			}
		}
		echo "${indent}};\n";
	}
?>
<?php
	ob_start();
	
	$header = strtoupper("sdl_${module}_h");
	echo "/*\n";
	echo "\tDescription: 	Do not edit this file manually\n";	
	echo "\tAuthor:			SDL Compiler\n";
	/*echo "\tDate:			";
	$datetime = time() + 28800; echo date("Y-M-jS H:i:s\n",$datetime);*/
	echo "*/\n\n";
	echo "#ifndef $header\n";
	echo "#define $header\n";
	$guard = strtoupper("sdl_${module}_base_h");
	echo "\n#ifndef $guard\n";
	echo "#include \"sdl_${module}_base.h\"\n";
	echo "#endif\n";
	
	echo "\n#pragma pack(1)\n";
	echo "\nnamespace $module {\n\n";
	
	foreach (@$doc->sentences as $sent)
	{
		$server = @$sent->server;
		if (!$server)
			continue;
		$current_server = $server->name;
		genProxyClass($server, "");
	}
	
	echo "\n} //namespace\n";
	echo "\n#pragma pack()\n";
	echo "\n#endif /* $header */ \n";
	
	$file_name = "sdl_${module}.h";
	$fd = fopen($file_name, 'w');
	fwrite($fd, ob_get_contents());
	fclose($fd);
	ob_clean();
	ob_end_flush();
?>